package org.marid.ide.extensions

import javafx.beans.binding.*
import javafx.beans.binding.Bindings.*
import javafx.beans.value.*

import java.util.concurrent.Callable

fun <T, R> ObservableValue<T>.map(func: (T) -> R): ObjectBinding<R> = createObjectBinding(Callable { func(value)}, this)
fun <T> ObservableValue<T>.mapDouble(func: (T) -> Double): DoubleBinding = createDoubleBinding(Callable { func(value) }, this)
fun ObservableDoubleValue.map(func: (Double) -> Double): DoubleBinding = createDoubleBinding(Callable { func(get()) }, this)
fun ObservableDoubleValue.mapFloat(func: (Double) -> Float): FloatBinding = createFloatBinding(Callable { func(get()) }, this)
fun ObservableDoubleValue.mapLong(func: (Double) -> Long): LongBinding = createLongBinding(Callable { func(get()) }, this)
fun ObservableDoubleValue.mapInt(func: (Double) -> Int): IntegerBinding = createIntegerBinding(Callable { func(get()) }, this)
fun ObservableDoubleValue.mapString(func: (Double) -> String): StringBinding = createStringBinding(Callable { func(get()) }, this)
fun ObservableDoubleValue.mapBoolean(func: (Double) -> Boolean): BooleanBinding = createBooleanBinding(Callable { func(get()) }, this)
fun <T> ObservableValue<T>.mapFloat(func: (T) -> Float): FloatBinding = createFloatBinding(Callable { func(value) }, this)
fun ObservableFloatValue.mapDouble(func: (Float) -> Double): DoubleBinding = createDoubleBinding(Callable { func(get()) }, this)
fun ObservableFloatValue.map(func: (Float) -> Float): FloatBinding = createFloatBinding(Callable { func(get()) }, this)
fun ObservableFloatValue.mapLong(func: (Float) -> Long): LongBinding = createLongBinding(Callable { func(get()) }, this)
fun ObservableFloatValue.mapInt(func: (Float) -> Int): IntegerBinding = createIntegerBinding(Callable { func(get()) }, this)
fun ObservableFloatValue.mapString(func: (Float) -> String): StringBinding = createStringBinding(Callable { func(get()) }, this)
fun ObservableFloatValue.mapBoolean(func: (Float) -> Boolean): BooleanBinding = createBooleanBinding(Callable { func(get()) }, this)
fun <T> ObservableValue<T>.mapLong(func: (T) -> Long): LongBinding = createLongBinding(Callable { func(value) }, this)
fun ObservableLongValue.mapDouble(func: (Long) -> Double): DoubleBinding = createDoubleBinding(Callable { func(get()) }, this)
fun ObservableLongValue.mapFloat(func: (Long) -> Float): FloatBinding = createFloatBinding(Callable { func(get()) }, this)
fun ObservableLongValue.map(func: (Long) -> Long): LongBinding = createLongBinding(Callable { func(get()) }, this)
fun ObservableLongValue.mapInt(func: (Long) -> Int): IntegerBinding = createIntegerBinding(Callable { func(get()) }, this)
fun ObservableLongValue.mapString(func: (Long) -> String): StringBinding = createStringBinding(Callable { func(get()) }, this)
fun ObservableLongValue.mapBoolean(func: (Long) -> Boolean): BooleanBinding = createBooleanBinding(Callable { func(get()) }, this)
fun <T> ObservableValue<T>.mapInt(func: (T) -> Int): IntegerBinding = createIntegerBinding(Callable { func(value) }, this)
fun ObservableIntegerValue.mapDouble(func: (Int) -> Double): DoubleBinding = createDoubleBinding(Callable { func(get()) }, this)
fun ObservableIntegerValue.mapFloat(func: (Int) -> Float): FloatBinding = createFloatBinding(Callable { func(get()) }, this)
fun ObservableIntegerValue.mapLong(func: (Int) -> Long): LongBinding = createLongBinding(Callable { func(get()) }, this)
fun ObservableIntegerValue.map(func: (Int) -> Int): IntegerBinding = createIntegerBinding(Callable { func(get()) }, this)
fun ObservableIntegerValue.mapString(func: (Int) -> String): StringBinding = createStringBinding(Callable { func(get()) }, this)
fun ObservableIntegerValue.mapBoolean(func: (Int) -> Boolean): BooleanBinding = createBooleanBinding(Callable { func(get()) }, this)
fun <T> ObservableValue<T>.mapString(func: (T) -> String): StringBinding = createStringBinding(Callable { func(value) }, this)
fun ObservableStringValue.mapDouble(func: (String) -> Double): DoubleBinding = createDoubleBinding(Callable { func(get()) }, this)
fun ObservableStringValue.mapFloat(func: (String) -> Float): FloatBinding = createFloatBinding(Callable { func(get()) }, this)
fun ObservableStringValue.mapLong(func: (String) -> Long): LongBinding = createLongBinding(Callable { func(get()) }, this)
fun ObservableStringValue.mapInt(func: (String) -> Int): IntegerBinding = createIntegerBinding(Callable { func(get()) }, this)
fun ObservableStringValue.map(func: (String) -> String): StringBinding = createStringBinding(Callable { func(get()) }, this)
fun ObservableStringValue.mapBoolean(func: (String) -> Boolean): BooleanBinding = createBooleanBinding(Callable { func(get()) }, this)
fun <T> ObservableValue<T>.mapBoolean(func: (T) -> Boolean): BooleanBinding = createBooleanBinding(Callable { func(value) }, this)
fun ObservableBooleanValue.mapDouble(func: (Boolean) -> Double): DoubleBinding = createDoubleBinding(Callable { func(get()) }, this)
fun ObservableBooleanValue.mapFloat(func: (Boolean) -> Float): FloatBinding = createFloatBinding(Callable { func(get()) }, this)
fun ObservableBooleanValue.mapLong(func: (Boolean) -> Long): LongBinding = createLongBinding(Callable { func(get()) }, this)
fun ObservableBooleanValue.mapInt(func: (Boolean) -> Int): IntegerBinding = createIntegerBinding(Callable { func(get()) }, this)
fun ObservableBooleanValue.mapString(func: (Boolean) -> String): StringBinding = createStringBinding(Callable { func(get()) }, this)
fun ObservableBooleanValue.map(func: (Boolean) -> Boolean): BooleanBinding = createBooleanBinding(Callable { func(get()) }, this)
